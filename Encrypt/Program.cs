using System; using System.Configuration; using System.Text; using System.Collections; using System.Security.Cryptography;
/// <summary>  	/// RSA加密解密及RSA签名和验证 	/// </summary>  public class RSA { 	#region RSA 加密解密   	#region RSA 的密钥产生  	/// <summary> 	/// RSA 的密钥产生 产生私钥 和公钥  	/// </summary> 	/// <param name="xmlKeys"></param> 	/// <param name="xmlPublicKey"></param> 	public Tuple<string,string> generateKey() 	{ 		System.Security.Cryptography.RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(); 		string xmlKeys = rsa.ToXmlString(true); 		string xmlPublicKey = rsa.ToXmlString(false); 		return Tuple.Create<string, string>(xmlKeys, xmlPublicKey); 	} 	#endregion  	#region RSA的加密函数  	//##############################################################################  	//RSA 方式加密  	//说明KEY必须是XML的行式,返回的是字符串  	//在有一点需要说明！！该加密方式有 长度 限制的！！  	//##############################################################################   	//RSA的加密函数  string 	public string encrypt(string xmlPublicKey, string m_strEncryptString) 	{  		byte[] PlainTextBArray; 		byte[] CypherTextBArray; 		string Result; 		RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(); 		rsa.FromXmlString(xmlPublicKey); 		PlainTextBArray = (new UnicodeEncoding()).GetBytes(m_strEncryptString); 		CypherTextBArray = rsa.Encrypt(PlainTextBArray, false); 		Result = Convert.ToBase64String(CypherTextBArray); 		return Result;  	} 	//RSA的加密函数 byte[] 	public string encrypt(string xmlPublicKey, byte[] EncryptString) 	{  		byte[] CypherTextBArray; 		string Result; 		RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(); 		rsa.FromXmlString(xmlPublicKey); 		CypherTextBArray = rsa.Encrypt(EncryptString, false); 		Result = Convert.ToBase64String(CypherTextBArray); 		return Result;  	} 	#endregion  	#region RSA的解密函数  	//RSA的解密函数  string 	public string decrypt(string xmlPrivateKey, string m_strDecryptString) 	{ 		byte[] PlainTextBArray; 		byte[] DypherTextBArray; 		string Result; 		System.Security.Cryptography.RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(); 		rsa.FromXmlString(xmlPrivateKey); 		PlainTextBArray = Convert.FromBase64String(m_strDecryptString); 		DypherTextBArray = rsa.Decrypt(PlainTextBArray, false); 		Result = (new UnicodeEncoding()).GetString(DypherTextBArray); 		return Result;  	}  	//RSA的解密函数  byte 	public string decrypt(string xmlPrivateKey, byte[] DecryptString) 	{ 		byte[] DypherTextBArray; 		string Result; 		System.Security.Cryptography.RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(); 		rsa.FromXmlString(xmlPrivateKey); 		DypherTextBArray = rsa.Decrypt(DecryptString, false); 		Result = (new UnicodeEncoding()).GetString(DypherTextBArray); 		return Result;  	} 	#endregion  	#endregion  	#region RSA数字签名   	#region 获取Hash描述表  	//获取Hash描述表  	public bool GetHash(string m_strSource, ref byte[] HashData) 	{ 		//从字符串中取得Hash描述  		byte[] Buffer; 		System.Security.Cryptography.HashAlgorithm MD5 = System.Security.Cryptography.HashAlgorithm.Create("MD5"); 		Buffer = System.Text.Encoding.GetEncoding("GB2312").GetBytes(m_strSource); 		HashData = MD5.ComputeHash(Buffer);  		return true; 	}  	//获取Hash描述表  	public bool GetHash(string m_strSource, ref string strHashData) 	{  		//从字符串中取得Hash描述  		byte[] Buffer; 		byte[] HashData; 		System.Security.Cryptography.HashAlgorithm MD5 = System.Security.Cryptography.HashAlgorithm.Create("MD5"); 		Buffer = System.Text.Encoding.GetEncoding("GB2312").GetBytes(m_strSource); 		HashData = MD5.ComputeHash(Buffer);  		strHashData = Convert.ToBase64String(HashData); 		return true;  	}  	//获取Hash描述表  	public bool GetHash(System.IO.FileStream objFile, ref byte[] HashData) 	{  		//从文件中取得Hash描述  		System.Security.Cryptography.HashAlgorithm MD5 = System.Security.Cryptography.HashAlgorithm.Create("MD5"); 		HashData = MD5.ComputeHash(objFile); 		objFile.Close();  		return true;  	}  	//获取Hash描述表  	public bool GetHash(System.IO.FileStream objFile, ref string strHashData) 	{  		//从文件中取得Hash描述  		byte[] HashData; 		System.Security.Cryptography.HashAlgorithm MD5 = System.Security.Cryptography.HashAlgorithm.Create("MD5"); 		HashData = MD5.ComputeHash(objFile); 		objFile.Close();  		strHashData = Convert.ToBase64String(HashData);  		return true;  	} 	#endregion  	#region RSA签名  	//RSA签名  	public bool SignatureFormatter(string p_strKeyPrivate, byte[] HashbyteSignature, ref byte[] EncryptedSignatureData) 	{  		System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  		RSA.FromXmlString(p_strKeyPrivate); 		System.Security.Cryptography.RSAPKCS1SignatureFormatter RSAFormatter = new System.Security.Cryptography.RSAPKCS1SignatureFormatter(RSA); 		//设置签名的算法为MD5  		RSAFormatter.SetHashAlgorithm("MD5"); 		//执行签名  		EncryptedSignatureData = RSAFormatter.CreateSignature(HashbyteSignature);  		return true;  	}  	//RSA签名  	public bool SignatureFormatter(string p_strKeyPrivate, byte[] HashbyteSignature, ref string m_strEncryptedSignatureData) 	{  		byte[] EncryptedSignatureData;  		System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  		RSA.FromXmlString(p_strKeyPrivate); 		System.Security.Cryptography.RSAPKCS1SignatureFormatter RSAFormatter = new System.Security.Cryptography.RSAPKCS1SignatureFormatter(RSA); 		//设置签名的算法为MD5  		RSAFormatter.SetHashAlgorithm("MD5"); 		//执行签名  		EncryptedSignatureData = RSAFormatter.CreateSignature(HashbyteSignature);  		m_strEncryptedSignatureData = Convert.ToBase64String(EncryptedSignatureData);  		return true;  	}  	//RSA签名  	public bool SignatureFormatter(string p_strKeyPrivate, string m_strHashbyteSignature, ref byte[] EncryptedSignatureData) 	{  		byte[] HashbyteSignature;  		HashbyteSignature = Convert.FromBase64String(m_strHashbyteSignature); 		System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  		RSA.FromXmlString(p_strKeyPrivate); 		System.Security.Cryptography.RSAPKCS1SignatureFormatter RSAFormatter = new System.Security.Cryptography.RSAPKCS1SignatureFormatter(RSA); 		//设置签名的算法为MD5  		RSAFormatter.SetHashAlgorithm("MD5"); 		//执行签名  		EncryptedSignatureData = RSAFormatter.CreateSignature(HashbyteSignature);  		return true;  	}  	//RSA签名  	public bool SignatureFormatter(string p_strKeyPrivate, string m_strHashbyteSignature, ref string m_strEncryptedSignatureData) 	{  		byte[] HashbyteSignature; 		byte[] EncryptedSignatureData;  		HashbyteSignature = Convert.FromBase64String(m_strHashbyteSignature); 		System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  		RSA.FromXmlString(p_strKeyPrivate); 		System.Security.Cryptography.RSAPKCS1SignatureFormatter RSAFormatter = new System.Security.Cryptography.RSAPKCS1SignatureFormatter(RSA); 		//设置签名的算法为MD5  		RSAFormatter.SetHashAlgorithm("MD5"); 		//执行签名  		EncryptedSignatureData = RSAFormatter.CreateSignature(HashbyteSignature);  		m_strEncryptedSignatureData = Convert.ToBase64String(EncryptedSignatureData);  		return true;  	} 	#endregion  	#region RSA 签名验证   	public bool SignatureDeformatter(string p_strKeyPublic, byte[] HashbyteDeformatter, byte[] DeformatterData) 	{  		System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  		RSA.FromXmlString(p_strKeyPublic); 		System.Security.Cryptography.RSAPKCS1SignatureDeformatter RSADeformatter = new System.Security.Cryptography.RSAPKCS1SignatureDeformatter(RSA); 		//指定解密的时候HASH算法为MD5  		RSADeformatter.SetHashAlgorithm("MD5");  		if (RSADeformatter.VerifySignature(HashbyteDeformatter, DeformatterData)) 		{ 			return true; 		} 		else 		{ 			return false; 		}  	}  	public bool SignatureDeformatter(string p_strKeyPublic, string p_strHashbyteDeformatter, byte[] DeformatterData) 	{  		byte[] HashbyteDeformatter;  		HashbyteDeformatter = Convert.FromBase64String(p_strHashbyteDeformatter);  		System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  		RSA.FromXmlString(p_strKeyPublic); 		System.Security.Cryptography.RSAPKCS1SignatureDeformatter RSADeformatter = new System.Security.Cryptography.RSAPKCS1SignatureDeformatter(RSA); 		//指定解密的时候HASH算法为MD5  		RSADeformatter.SetHashAlgorithm("MD5");  		if (RSADeformatter.VerifySignature(HashbyteDeformatter, DeformatterData)) 		{ 			return true; 		} 		else 		{ 			return false; 		}  	}  	public bool SignatureDeformatter(string p_strKeyPublic, byte[] HashbyteDeformatter, string p_strDeformatterData) 	{  		byte[] DeformatterData;  		System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  		RSA.FromXmlString(p_strKeyPublic); 		System.Security.Cryptography.RSAPKCS1SignatureDeformatter RSADeformatter = new System.Security.Cryptography.RSAPKCS1SignatureDeformatter(RSA); 		//指定解密的时候HASH算法为MD5  		RSADeformatter.SetHashAlgorithm("MD5");  		DeformatterData = Convert.FromBase64String(p_strDeformatterData);  		if (RSADeformatter.VerifySignature(HashbyteDeformatter, DeformatterData)) 		{ 			return true; 		} 		else 		{ 			return false; 		}  	}  	public bool SignatureDeformatter(string p_strKeyPublic, string p_strHashbyteDeformatter, string p_strDeformatterData) 	{  		byte[] DeformatterData; 		byte[] HashbyteDeformatter;  		HashbyteDeformatter = Convert.FromBase64String(p_strHashbyteDeformatter); 		System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  		RSA.FromXmlString(p_strKeyPublic); 		System.Security.Cryptography.RSAPKCS1SignatureDeformatter RSADeformatter = new System.Security.Cryptography.RSAPKCS1SignatureDeformatter(RSA); 		//指定解密的时候HASH算法为MD5  		RSADeformatter.SetHashAlgorithm("MD5");  		DeformatterData = Convert.FromBase64String(p_strDeformatterData);  		if (RSADeformatter.VerifySignature(HashbyteDeformatter, DeformatterData)) 		{ 			return true; 		} 		else 		{ 			return false; 		}  	} }  	#endregion   	#endregion

class Staff
{
	public int uid;
	public string idcard;
	public string name;
	public string sex;
	public string birthday;
	public string workday;
	public string salary;
	public Staff(int uid, string idcard, string name, string sex, string birthday, string workday, string salary)
	{
		this.uid = uid;
		this.idcard = idcard;
		this.name = name;
		this.sex = sex;
		this.birthday = birthday;
		this.workday = workday;
		this.salary = salary;
	} }  class RSAHelper {
	string privateKey; 	string publicKey; 	RSA rsa = new RSA(); 	public RSAHelper() { 		Tuple<string, string> tuple = rsa.generateKey(); 		privateKey = tuple.Item1; 		publicKey = tuple.Item2; 	}  	public string encrypt(string input) {
		return rsa.encrypt(publicKey, input); 	} 	public string decrypt(string input) {
		return rsa.decrypt(privateKey, input); 	} } 
namespace Encrypt
{
	class MainClass
	{
		public static void Main(string[] args)
		{
			ArrayList list;
			RSAHelper rsa = new RSAHelper(); 			list = new ArrayList(); 			list.Add(new Staff(1, "530121198207183746", "殷婷美", "女", "1977-02-01", "2017-06-09", "2500")); 			list.Add(new Staff(2, "530121197008214197", "平梦秋", "女", "1977-06-01", "2017-06-09", "5500")); 			list.Add(new Staff(3, "450933829382983822", "何健柏", "男", "2000-06-09", "2017-06-09", "3500")); 			list.Add(new Staff(4, "450933829382983822", "范明泽", "男", "1987-06-09", "2017-06-09", "2000")); 			list.Add(new Staff(5, "450933829382983822", "安涵函", "男", "1987-09-09", "2017-06-09", "3500"));  			Console.WriteLine("开始加密"); 			for (int i = 0; i < list.Count; i++)
			{
				Staff staff = (Staff)list[i];
				staff.salary = rsa.encrypt(staff.salary);
				staff.idcard = rsa.encrypt(staff.idcard);
				if (staff.sex.Equals("女"))
				{
					staff.name = rsa.encrypt(staff.name);
					staff.birthday = rsa.encrypt(staff.birthday);
				} 				Console.WriteLine("身份证号:"+staff.idcard+" 姓名："+staff.name+" 性别："+staff.sex+" 出生日期："+staff.birthday+ " "+staff.workday+" 工资："+staff.salary);
			} 			Console.WriteLine("开始解密"); 			for (int i = 0; i < list.Count; i++) 			{ 				Staff staff = (Staff)list[i]; 				staff.salary = rsa.decrypt(staff.salary); 				staff.idcard = rsa.decrypt(staff.idcard); 				if (staff.sex.Equals("女")) 				{ 					staff.name = rsa.decrypt(staff.name); 					staff.birthday = rsa.decrypt(staff.birthday); 				} 				Console.WriteLine("身份证号:" + staff.idcard + " 姓名：" + staff.name + " 性别：" + staff.sex + " 出生日期：" + staff.birthday + " " + staff.workday + " 工资：" + staff.salary); 			}
		}
	}
}
